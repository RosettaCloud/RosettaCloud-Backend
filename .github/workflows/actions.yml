name: Build & publish images + update Lambda
on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: Docker tag
        default: latest
      github_iam_role:
        description: IAM role for GitHub Actions
        default: github-actions-role
      aws_account_id:
        description: AWS Account ID
        default: "339712964409"
      aws_region:
        description: AWS Region
        default: me-central-1
jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile_path: serverless/Lambda/document_indexer/Dockerfile
            build_dir: serverless/Lambda/document_indexer
            ecr_repository: rosettacloud-document_indexer-lambda
            lambda_name: document_indexer
          - dockerfile_path: serverless/Lambda/ai_chatbot/Dockerfile
            build_dir: serverless/Lambda/ai_chatbot
            ecr_repository: rosettacloud-ai_chatbot-lambda
            lambda_name: document_indexer
          - dockerfile_path: backend/Dockerfile
            build_dir: backend
            ecr_repository: rosettacloud-backend
            lambda_name: ""
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.github_iam_role }}
          aws-region: ${{ inputs.aws_region }}
      - name: Login to ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ inputs.aws_account_id }}
      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories --repository-names ${{ matrix.ecr_repository }} \
          || aws ecr create-repository --repository-name ${{ matrix.ecr_repository }}
      - name: Build & push image
        id: push
        env:
          REGISTRY: ${{ steps.login.outputs.registry }}
        run: |
          IMAGE_URI=$REGISTRY/${{ matrix.ecr_repository }}:${{ inputs.image_tag }}
          docker build --platform linux/amd64 \
            -f ${{ matrix.dockerfile_path }} \
            ${{ matrix.build_dir }} \
            -t "$IMAGE_URI"
          docker push "$IMAGE_URI"
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
      - name: Update Lambda (only if lambda_name is set)
        if: matrix.lambda_name != ''
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.lambda_name }} \
            --image-uri       ${{ steps.push.outputs.image_uri }} \
            --region          ${{ inputs.aws_region }}
